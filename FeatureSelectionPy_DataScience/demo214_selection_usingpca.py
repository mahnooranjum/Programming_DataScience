# -*- coding: utf-8 -*-
"""Demo214_Selection_UsingPCA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PJiY-Z7x3sSax37hA2l0GYUZOQztcXWb

# **Survival of the FITtest**
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

"""## Get  Dataset"""

from sklearn.datasets import load_breast_cancer
data = load_breast_cancer()

data.keys()

X = data.data
y = data.target

# TRAIN TEST SPLIT
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Reference: stackoverflow.com/questions/50796024/
# Applying PCA
from sklearn.decomposition import PCA
model = PCA(n_components=5).fit(X_train)
X_pc = model.transform(X_train)
n_pcs= model.components_.shape[0]
# max correlation on each principal component
most_important = [np.abs(model.components_[i]).argmax() for i in range(n_pcs)]
feature_names = list(range(X_train.shape[1]))
important_names = [feature_names[most_important[i]] for i in range(n_pcs)]

# print
dic = {'PC{}'.format(i): important_names[i] for i in range(n_pcs)}

dic

fig, ax = plt.subplots(figsize=(10,8))
sns.set_theme(style="whitegrid", palette="pastel")
g = sns.barplot([x for x in range(n_pcs)], model.explained_variance_, ax=ax)
g.set_xticklabels([])
sns.set_style("whitegrid")
g.set_title("PCA scree plot")

from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier()
classifier.fit(X_train,y_train)
importance = classifier.feature_importances_
# summarize importance
# for i,v in enumerate(importance):
# 	print('Feature: %0d, Score: %.5f' % (i,v))
# plot importance

type(importance)

n = 5
indices = (-importance).argsort()[:n]
print(indices)

important_names

y_pred = classifier.predict(X_test)

X_train.shape

from sklearn.metrics import accuracy_score
acc_score = accuracy_score(y_test, y_pred)
print(X_train.shape, acc_score)

classifier = RandomForestClassifier()
classifier.fit(X_train[:, important_names], y_train)
y_pred = classifier.predict(X_test[:, important_names])
acc_score = accuracy_score(y_test, y_pred)
print(X_train[:, important_names].shape, acc_score)